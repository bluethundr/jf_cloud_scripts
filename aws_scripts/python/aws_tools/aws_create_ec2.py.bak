#!/usr/bin/env python3
from modules import *

def create_instances(image_id, max_count, key_name, instance_type, aws_account, region, ec2_client, ec2_resource, subnet_id, name_tags, sg_id, public_ip, private_ip_list, tenancy, monitoring_enabled, user_data):
    print(Fore.CYAN)
    banner("Creating the instance(s)", "*")
    # create a new EC2 instance
    if private_ip_list is not None:
        for private_ip in private_ip_list:
            instances = ec2_resource.create_instances(
                ImageId=image_id,
                InstanceType=instance_type,
                KeyName=key_name,
                MaxCount=1,
                MinCount=1,
                DryRun=False,
                DisableApiTermination=True,
                EbsOptimized=False,
                UserData=user_data,
                Placement={
                    'Tenancy': tenancy,
                },
                Monitoring={
                    'Enabled': monitoring_enabled
                },
                InstanceInitiatedShutdownBehavior='stop',
                NetworkInterfaces=[
                    {
                        'AssociatePublicIpAddress': public_ip,
                        'DeleteOnTermination': True,
                        'DeviceIndex': 0,
                        'PrivateIpAddress': private_ip,
                        'SubnetId': subnet_id,
                        'Groups': [
                            sg_id
                        ]
                    }
                ]
                )
    else:
        instances = ec2_resource.create_instances(
        ImageId=image_id,
        InstanceType=instance_type,
        KeyName=key_name,
        MaxCount=max_count,
        MinCount=1,
        DisableApiTermination=True,
        EbsOptimized=False,
        UserData=user_data,
        Placement={
            'Tenancy': tenancy,
        },
        Monitoring={
            'Enabled': monitoring_enabled
        },
        InstanceInitiatedShutdownBehavior='stop',
        NetworkInterfaces=[
            {
                'AssociatePublicIpAddress': public_ip,
                'DeleteOnTermination': True,
                'DeviceIndex': 0,
                'SubnetId': subnet_id,
                'Groups': [
                    sg_id
                ]
            }
        ]
        )
    instance_list, root_volumes_list = list_new_instances(ec2_client, instances)
    print(f"Instance List: {instance_list}\nRoot Volumes List: {root_volumes_list}")
    return instance_list, root_volumes_list


def main():
    welcomebanner()
    aws_account, region, max_count, image_id, key_name, instance_type, vpc_id, subnet_id, sg_id, sg_list, subnet_ids, public_ip, private_ip_list, tenancy, monitoring_enabled, user_data, name_tags = user_input()
    today, aws_env_list, ec2_client, ec2_resource = initialize(aws_account, region)
    instance_list, root_volumes_list = create_instances(image_id, max_count, key_name, instance_type, aws_account, region, ec2_client, ec2_resource, subnet_id, name_tags, sg_id, public_ip, private_ip_list, tenancy, monitoring_enabled, user_data)
    tag_instances(instance_list, name_tags, ec2_client)
    tag_root_volumes(instance_list, name_tags, ec2_client, root_volumes_list)
    endbanner()
    
if __name__ == "__main__":
    main()